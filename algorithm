import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

public class ConfluenceClient {

    private final WebClient webClient;
    private final String uri;
    private final AtomicReference<StringBuilder> cookies = new AtomicReference<>(new StringBuilder());

    public ConfluenceClient(WebClient.Builder webClientBuilder, String uri) {
        this.webClient = webClientBuilder.filter(addCookiesFilter()).build();
        this.uri = uri;
    }

    public String getDocFromConfluence(String url) {
        if (url == null || url.isBlank() || url.isEmpty()) {
            log.error("URL is not valid {}", url);
            throw new IllegalArgumentException("Invalid url");
        }
        log.info("Download page from URL {}", url);

        // Certifique-se de que está logado antes de fazer a chamada
        if (cookies.get().length() == 0) {
            this.loginConfluence().block();
        }

        return webClient
                .get()
                .uri(url)
                .retrieve()
                .bodyToMono(String.class)
                .block();
    }

    private Mono<Void> loginConfluence() {
        try {
            return webClient
                    .post()
                    .uri(loginUri)
                    .headers(httpHeaders -> httpHeaders.set("Content-Type", "application/x-www-form-urlencoded"))
                    .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                    .body(BodyInserters.fromFormData(getStringStringMultiValueMap()))
                    .retrieve()
                    .toEntity(String.class)
                    .flatMap(response -> {
                        List<String> cookiesList = response.getHeaders().get(HttpHeaders.SET_COOKIE);
                        if (cookiesList != null) {
                            for (String cookie : cookiesList) {
                                String[] cookieParts = cookie.split(";");
                                for (String cookiePart : cookieParts) {
                                    String[] keyValue = cookiePart.split("=", 2);
                                    if (keyValue.length == 2) {
                                        cookies.put(keyValue[0].trim(), keyValue[1].trim());
                                    }
                                }
                            }
                        }
                        return Mono.empty();
                    });
        } catch (Exception e) {
            log.error("Error making login to Confluence at URL {}: {}", loginUri, e.getMessage());
            throw new AuthenticationException("Error trying to authenticate with Confluence", e);
        }
    }

    private StringBuilder buildCookieString(ResponseEntity<String> response) {
        StringBuilder cookie = new StringBuilder();
        List<String> cookiesList = response.getHeaders().get(HttpHeaders.SET_COOKIE);
        for (String s : cookiesList) {
            cookie = cookie.toString().isEmpty() ? cookie.append(s) : cookie.append("; ").append(s);
        }
        log.info("return cookiesList {}", cookiesList);
        return cookie;
    }

    private MultiValueMap<String, String> getStringStringMultiValueMap() {
        log.info("Construct map for HTTP call");
        MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();
        formData.add("os_username", "t734536");
        formData.add("os_cookie", "true");
        formData.add("login", "Autenticação");
        formData.add("os_destination", "");
        formData.add("os_password", "Gbb0914@");
        return formData;
    }

    private ExchangeFilterFunction addCookiesFilter() {
        return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> {
            if (!cookies.isEmpty()) {
                StringBuilder cookieHeader = new StringBuilder();
                cookies.forEach((key, value) -> {
                    if (cookieHeader.length() > 0) {
                        cookieHeader.append("; ");
                    }
                    cookieHeader.append(key).append("=").append(value);
                });

                clientRequest = ClientRequest.from(clientRequest)
                        .header(HttpHeaders.COOKIE, cookieHeader.toString())
                        .build();
            }
            return Mono.just(clientRequest);
        });
    }
}
