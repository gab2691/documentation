import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class JourneyServiceTest {

    @Mock
    private DemandaReservaService demandaReservaService;

    @Mock
    private DemandaReservaRepository demandaReservaRepository;

    @Mock
    private ConjuntoComponenteMapper conjuntoComponenteMapper;

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private JourneyService journeyService;

    private HttpHeaders headers;

    @BeforeEach
    void setUp() {
        headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        headers.set("User-Agent", "Mozilla/5.0");
        headers.set("Authorization", "Basic token123");
    }

    @Test
    void shouldFetchJourneysInApiServiceNow() {
        // Arrange
        String idJourney = "journey123";
        List<JourneyClientDTO> journeyList = List.of(
                JourneyClientDTO.builder()
                        .numeroDemanda(idJourney)
                        .fase("Open")
                        .subfase("Active")
                        .centroDeCusto("CC001")
                        .cpf("12345678901")
                        .build()
        );

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<List<JourneyClientDTO>> response = new ResponseEntity<>(journeyList, HttpStatus.OK);

        when(demandaReservaService.checkIfJourneyExists(idJourney)).thenReturn(false);
        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.GET),
                eq(entity),
                any(ParameterizedTypeReference.class))
        ).thenReturn(response);

        // Act
        JourneyDTO result = journeyService.fetchJourneysInApiServiceNow(idJourney);

        // Assert
        assertNotNull(result);
        assertEquals(idJourney, result.getId());
        verify(restTemplate, times(1)).exchange(
                anyString(),
                eq(HttpMethod.GET),
                eq(entity),
                any(ParameterizedTypeReference.class)
        );
    }

    @Test
    void shouldThrowExceptionWhenJourneyNotFoundInApi() {
        // Arrange
        String idJourney = "journey123";
        HttpEntity<String> entity = new HttpEntity<>(headers);

        when(demandaReservaService.checkIfJourneyExists(idJourney)).thenReturn(false);
        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.GET),
                eq(entity),
                any(ParameterizedTypeReference.class))
        ).thenThrow(HttpClientErrorException.NotFound.class);

        // Act & Assert
        ResourceNotFoundException exception = assertThrows(
                ResourceNotFoundException.class,
                () -> journeyService.fetchJourneysInApiServiceNow(idJourney)
        );

        assertEquals("Lista de Journeys vazia.", exception.getMessage());
        verify(restTemplate, times(1)).exchange(
                anyString(),
                eq(HttpMethod.GET),
                eq(entity),
                any(ParameterizedTypeReference.class)
        );
    }

    @Test
    void shouldFetchCostCenter() {
        // Arrange
        String ccSigla = "CC001";
        CostCenterTechLeadDTO costCenter = new CostCenterTechLeadDTO(ccSigla, "Cost Center Test");
        CostCenterTechLeadDTO[] costCenters = {costCenter};

        when(restTemplate.getForObject(anyString(), eq(CostCenterTechLeadDTO[].class))).thenReturn(costCenters);

        // Act
        CostCenterTechLeadDTO result = journeyService.fetchCostCenter(ccSigla);

        // Assert
        assertNotNull(result);
        assertEquals(ccSigla, result.getSigla());
        verify(restTemplate, times(1)).getForObject(anyString(), eq(CostCenterTechLeadDTO[].class));
    }

    @Test
    void shouldThrowExceptionWhenCostCenterNotFound() {
        // Arrange
        String ccSigla = "CC001";
        CostCenterTechLeadDTO[] costCenters = {};

        when(restTemplate.getForObject(anyString(), eq(CostCenterTechLeadDTO[].class))).thenReturn(costCenters);

        // Act & Assert
        ResourceNotFoundException exception = assertThrows(
                ResourceNotFoundException.class,
                () -> journeyService.fetchCostCenter(ccSigla)
        );

        assertEquals("Cost center not found for sigla: CC001", exception.getMessage());
        verify(restTemplate, times(1)).getForObject(anyString(), eq(CostCenterTechLeadDTO[].class));
    }
}
