import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DemandaReservaServiceTest {

    @Mock
    private DemandaReservaRepository demandaReservaRepository;

    @Mock
    private ConjuntoComponenteRepository conjuntoComponenteRepository;

    @Mock
    private DemandaReservaMapper demandaReservaMapper;

    @InjectMocks
    private DemandaReservaService demandaReservaService;

    private DemandaReservaDTO demandaReservaDTO;
    private DemandaReserva demandaReserva;
    private DemandaListDTO demandaListDTO;

    @BeforeEach
    void setUp() {
        demandaReservaDTO = DemandaReservaDTO.builder()
                .idJourney("journey123")
                .environment(Ambiente.PRODUCAO)
                .cc("12345")
                .cpf("11111111111")
                .arquetipos(List.of(UUID.randomUUID()))
                .codFuncional("func123")
                .status("Ativo")
                .build();

        demandaReserva = DemandaReserva.builder()
                .idJourney("journey123")
                .environment(Ambiente.PRODUCAO)
                .cc("12345")
                .cpf("11111111111")
                .arquetipos(List.of(new ConjuntoComponente()))
                .codFuncional("func123")
                .status("Ativo")
                .build();

        demandaListDTO = new DemandaListDTO(1L, Ambiente.PRODUCAO, "journey123", "12345", "11111111111");
    }

    @Test
    void shouldCreateDemandaReserva() {
        when(conjuntoComponenteRepository.findAllById(demandaReservaDTO.getArquetipos()))
                .thenReturn(List.of(new ConjuntoComponente()));
        when(demandaReservaRepository.save(any(DemandaReserva.class))).thenReturn(demandaReserva);

        DemandaReserva result = demandaReservaService.create(demandaReservaDTO);

        assertNotNull(result);
        assertEquals(demandaReservaDTO.getIdJourney(), result.getIdJourney());
        verify(demandaReservaRepository, times(1)).save(any(DemandaReserva.class));
    }

    @Test
    void shouldReadAllDemandaReservas() {
        Pageable pageable = PageRequest.of(0, 10);
        Page<DemandaReserva> page = new PageImpl<>(List.of(demandaReserva));
        when(demandaReservaRepository.findAll(pageable)).thenReturn(page);
        when(demandaReservaMapper.convertToDTO(demandaReserva)).thenReturn(demandaListDTO);

        Page<DemandaListDTO> result = demandaReservaService.readAll(pageable);

        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        verify(demandaReservaRepository, times(1)).findAll(pageable);
    }

    @Test
    void shouldUpdateEnvironment() {
        when(demandaReservaRepository.findByIdJourney("journey123")).thenReturn(Optional.of(demandaReserva));
        when(demandaReservaRepository.save(any(DemandaReserva.class))).thenReturn(demandaReserva);

        DemandaReserva result = demandaReservaService.updateEnvironment("journey123", Ambiente.TESTE);

        assertNotNull(result);
        assertEquals(Ambiente.TESTE, result.getEnvironment());
        verify(demandaReservaRepository, times(1)).findByIdJourney("journey123");
        verify(demandaReservaRepository, times(1)).save(demandaReserva);
    }

    @Test
    void shouldThrowExceptionWhenUpdatingNonexistentJourney() {
        when(demandaReservaRepository.findByIdJourney("journey123")).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> demandaReservaService.updateEnvironment("journey123", Ambiente.TESTE));

        assertEquals("Journey not found", exception.getMessage());
        verify(demandaReservaRepository, times(1)).findByIdJourney("journey123");
    }

    @Test
    void shouldCheckIfJourneyExists() {
        when(demandaReservaRepository.existsByIdJourney("journey123")).thenReturn(true);

        ResourceAlreadyExistsException exception = assertThrows(ResourceAlreadyExistsException.class,
                () -> demandaReservaService.checkIfJourneyExists("journey123"));

        assertEquals("Demanda jÃ¡ existe com idJourney: journey123", exception.getMessage());
        verify(demandaReservaRepository, times(1)).existsByIdJourney("journey123");
    }

    @Test
    void shouldDeleteDemandaReservaWhenFound() {
        when(demandaReservaRepository.findByIdJourney("journey123")).thenReturn(Optional.of(demandaReserva));

        demandaReservaService.delete("journey123");

        verify(demandaReservaRepository, times(1)).findByIdJourney("journey123");
        verify(demandaReservaRepository, times(1)).delete(demandaReserva);
    }

    @Test
    void shouldThrowExceptionWhenDeletingNonexistentJourney() {
        when(demandaReservaRepository.findByIdJourney("journey123")).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> demandaReservaService.delete("journey123"));

        assertEquals("Journey not found", exception.getMessage());
        verify(demandaReservaRepository, times(1)).findByIdJourney("journey123");
    }
}
