import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;
import java.util.stream.Collectors;

public class ProjectGenerator {

    public static void main(String[] args) {
        String artifactId = "projeto-legal";
        String oldGroupId = "br.com.bradesco.kit.srv";
        String newGroupId = "br.com.bradesco." + artifactId;
        Path skeletonDir = Paths.get("c:/path/to/skeleton");
        Path targetDir = Paths.get("c:/path/to/target/" + artifactId);

        try {
            copySkeleton(skeletonDir, targetDir);
            System.out.println("Skeleton copied successfully!");

            updatePackages(targetDir, oldGroupId, newGroupId);
            System.out.println("Package names updated successfully!");
        } catch (IOException e) {
            System.err.println("Failed to copy skeleton: " + e.getMessage());
        }
    }

    private static void copySkeleton(Path source, Path target) throws IOException {
        try (Stream<Path> stream = Files.walk(source)) {
            stream.forEach(sourcePath -> {
                Path targetPath = target.resolve(source.relativize(sourcePath));
                try {
                    if (Files.isDirectory(sourcePath)) {
                        Files.createDirectories(targetPath);
                    } else {
                        Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);
                    }
                } catch (IOException e) {
                    throw new RuntimeException("Error copying " + sourcePath + " to " + targetPath, e);
                }
            });
        }
    }

    private static void updatePackages(Path targetDir, String oldGroupId, String newGroupId) throws IOException {
        Files.walkFileTree(targetDir, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                if (file.toString().endsWith(".java")) {
                    List<String> lines = Files.readAllLines(file);
                    List<String> replaced = lines.stream()
                        .map(line -> line.replace("package " + oldGroupId, "package " + newGroupId))
                        .map(line -> line.replace(oldGroupId + ".", newGroupId + "."))
                        .collect(Collectors.toList());
                    Files.write(file, replaced);
                }
                return FileVisitResult.CONTINUE;
            }
        });
    }
}
