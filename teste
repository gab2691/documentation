import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

public class JGitCommitPush {
    public static void main(String[] args) {
        String remoteRepoUrl = "https://github.com/your-org/your-repo.git";
        String branch = "main";
        String commitMessage = "Added workflow files via GitHub App";
        String githubToken = "your_github_token"; // GitHub App installation token

        try {
            // Temporary directory for cloning
            File tempDir = Files.createTempDirectory("repo").toFile();

            // Clone the repository (shallow for performance)
            Git git = Git.cloneRepository()
                    .setURI(remoteRepoUrl)
                    .setBranch(branch)
                    .setDirectory(tempDir)
                    .setDepth(1)
                    .setCredentialsProvider(new UsernamePasswordCredentialsProvider("x-access-token", githubToken))
                    .call();

            // Ensure the .github/workflows/ directory exists
            File workflowsDir = new File(tempDir, ".github/workflows/");
            if (!workflowsDir.exists()) {
                workflowsDir.mkdirs(); // Create if missing
            }

            // Copy your workflow files from inside the application to the cloned repo
            File sourceFile = new File("/path/to/your/application/.github/workflows/your-file.yml"); // Replace with your actual file
            File targetFile = new File(tempDir, ".github/workflows/your-file.yml");

            Files.copy(sourceFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);

            // Stage the files explicitly
            git.add().addFilepattern(".github/workflows/").call();

            // Check if changes exist before committing
            if (!git.status().call().hasUncommittedChanges()) {
                System.out.println("No changes to commit. Exiting...");
                return;
            }

            // Commit the changes
            git.commit().setMessage(commitMessage).call();

            // Push changes
            git.push()
                    .setCredentialsProvider(new UsernamePasswordCredentialsProvider("x-access-token", githubToken))
                    .call();

            System.out.println("Files committed and pushed successfully!");

        } catch (GitAPIException | IOException e) {
            e.printStackTrace();
        }
    }
}
