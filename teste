@Test
void shouldFetchJourneysTechLead() {
    // Arrange
    String idJourney = "journey123";

    DemandaReserva demandaReserva = new DemandaReserva();
    demandaReserva.setIdJourney(idJourney);
    demandaReserva.setEnvironment("dev");
    demandaReserva.setCpf("12345678901");
    demandaReserva.setCc("CC001");

    ConjuntoComponente conjuntoComponente = new ConjuntoComponente();
    List<ConjuntoComponente> arquetipos = List.of(conjuntoComponente);
    demandaReserva.setArquetipos(arquetipos);

    ArchetypeTechLeadDTO archetypeDTO = new ArchetypeTechLeadDTO();
    CostCenterTechLeadDTO costCenterDTO = new CostCenterTechLeadDTO("CC001", "Cost Center Name");

    // Mockando o comportamento
    when(demandaReservaRepository.findByIdJourney(idJourney)).thenReturn(Optional.of(demandaReserva));
    when(conjuntoComponenteMapper.convertToArchetypeDTO(conjuntoComponente)).thenReturn(archetypeDTO);

    RestTemplate mockRestTemplate = mock(RestTemplate.class);

    // Envolver toda a chamada em um bloco try-with-resources
    try (MockedStatic<RestTemplateFactory> mockedFactory = Mockito.mockStatic(RestTemplateFactory.class)) {
        mockedFactory.when(RestTemplateFactory::createRestTemplateMiddleware).thenReturn(mockRestTemplate);

        CostCenterTechLeadDTO[] costCenters = { costCenterDTO };
        when(mockRestTemplate.getForObject(eq("http://test-cost-center-url.com"), eq(CostCenterTechLeadDTO[].class)))
                .thenReturn(costCenters);

        // Act
        JourneyTechLeadDTO result = journeyService.fetchJourneysTechLead(idJourney);

        // Assert
        assertNotNull(result);
        assertEquals(idJourney, result.getId());
        assertEquals("dev", result.getEnviroment());
        assertEquals("12345678901", result.getCpf());
        assertEquals(costCenterDTO, result.getCostcenter());
        assertEquals(List.of(archetypeDTO), result.getArchetypes());

        verify(demandaReservaRepository, times(1)).findByIdJourney(idJourney);
        verify(conjuntoComponenteMapper, times(1)).convertToArchetypeDTO(conjuntoComponente);
        verify(mockRestTemplate, times(1)).getForObject(eq("http://test-cost-center-url.com"), eq(CostCenterTechLeadDTO[].class));
    }
}
