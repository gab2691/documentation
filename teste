import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;

@ExtendWith(MockitoExtension.class)
class JourneyServiceTest {

    private JourneyService journeyService;

    @Mock
    private DemandaReservaService demandaReservaService;

    @Mock
    private DemandaReservaRepository demandaReservaRepository;

    @Mock
    private ConjuntoComponenteMapper conjuntoComponenteMapper;

    @BeforeEach
    void setUp() {
        journeyService = new JourneyService(
                demandaReservaService,
                demandaReservaRepository,
                conjuntoComponenteMapper
        );

        // Configurar valores para campos anotados com @Value
        ReflectionTestUtils.setField(journeyService, "journeyAuthorization", "Basic token123");
        ReflectionTestUtils.setField(journeyService, "journeyurl", "http://test-journey-url.com");
        ReflectionTestUtils.setField(journeyService, "costCenterUrl", "http://test-cost-center-url.com");
    }

    @Test
    void shouldFetchJourneysInApiServiceNow() {
        // Arrange
        String idJourney = "journey123";
        List<JourneyClientDTO> journeyList = List.of(
                JourneyClientDTO.builder()
                        .numeroDemanda(idJourney)
                        .fase("Open")
                        .subfase("Active")
                        .centroDeCusto("CC001")
                        .cpf("12345678901")
                        .build()
        );

        ResponseEntity<List<JourneyClientDTO>> response = new ResponseEntity<>(journeyList, HttpStatus.OK);

        // Mockar o RestTemplate
        RestTemplate mockRestTemplate = mock(RestTemplate.class);

        // Mockar o método estático RestTemplateFactory.createRestTemplateMiddleware()
        try (MockedStatic<RestTemplateFactory> mockedFactory = Mockito.mockStatic(RestTemplateFactory.class)) {
            mockedFactory.when(RestTemplateFactory::createRestTemplateMiddleware).thenReturn(mockRestTemplate);

            // Configurar o comportamento do restTemplate mockado
            when(demandaReservaService.checkIfJourneyExists(idJourney)).thenReturn(false);
            when(mockRestTemplate.exchange(
                    eq("http://test-journey-url.com/" + idJourney),
                    eq(HttpMethod.GET),
                    any(HttpEntity.class),
                    any(ParameterizedTypeReference.class))
            ).thenReturn(response);

            // Act
            JourneyDTO result = journeyService.fetchJourneysInApiServiceNow(idJourney);

            // Assert
            assertNotNull(result);
            assertEquals(idJourney, result.getId());
            verify(mockRestTemplate, times(1)).exchange(
                    eq("http://test-journey-url.com/" + idJourney),
                    eq(HttpMethod.GET),
                    any(HttpEntity.class),
                    any(ParameterizedTypeReference.class)
            );
        }
    }

    @Test
    void shouldThrowExceptionWhenJourneyNotFoundInApi() {
        // Arrange
        String idJourney = "journey123";

        RestTemplate mockRestTemplate = mock(RestTemplate.class);

        // Mockar o método estático
        try (MockedStatic<RestTemplateFactory> mockedFactory = Mockito.mockStatic(RestTemplateFactory.class)) {
            mockedFactory.when(RestTemplateFactory::createRestTemplateMiddleware).thenReturn(mockRestTemplate);

            when(demandaReservaService.checkIfJourneyExists(idJourney)).thenReturn(false);
            when(mockRestTemplate.exchange(
                    eq("http://test-journey-url.com/" + idJourney),
                    eq(HttpMethod.GET),
                    any(HttpEntity.class),
                    any(ParameterizedTypeReference.class))
            ).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));

            // Act & Assert
            ResourceNotFoundException exception = assertThrows(
                    ResourceNotFoundException.class,
                    () -> journeyService.fetchJourneysInApiServiceNow(idJourney)
            );

            assertEquals("Lista de Journeys vazia.", exception.getMessage());
        }
    }

    // Outros testes...
}
