import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DominioServiceTest {

    @Mock
    private DominioRepository dominioRepository;

    @InjectMocks
    private DominioService dominioService;

    private Dominio dominio;

    @BeforeEach
    void setUp() {
        dominio = new Dominio();
        dominio.setId(1);
        dominio.setSigla("ABC");
        dominio.setDescricao("Descrição de Teste");
    }

    @Test
    void shouldCreateDominio() {
        when(dominioRepository.save(dominio)).thenReturn(dominio);

        Dominio result = dominioService.create(dominio);

        assertNotNull(result);
        assertEquals(dominio.getId(), result.getId());
        verify(dominioRepository, times(1)).save(dominio);
    }

    @Test
    void shouldReadAllDominios() {
        Pageable pageable = PageRequest.of(0, 10);
        Page<Dominio> page = new PageImpl<>(List.of(dominio));
        when(dominioRepository.findAll(pageable)).thenReturn(page);

        Page<Dominio> result = dominioService.readAll(pageable);

        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        verify(dominioRepository, times(1)).findAll(pageable);
    }

    @Test
    void shouldReadByIdWhenFound() {
        when(dominioRepository.findById(1)).thenReturn(Optional.of(dominio));

        Dominio result = dominioService.readById(1);

        assertNotNull(result);
        assertEquals(dominio.getId(), result.getId());
        verify(dominioRepository, times(1)).findById(1);
    }

    @Test
    void shouldThrowExceptionWhenReadByIdNotFound() {
        when(dominioRepository.findById(1)).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> dominioService.readById(1));

        assertEquals("Dominio informado não encontrado. Id: 1", exception.getMessage());
        verify(dominioRepository, times(1)).findById(1);
    }

    @Test
    void shouldUpdateDominioWhenFound() {
        Dominio updatedDominio = new Dominio();
        updatedDominio.setSigla("DEF");
        updatedDominio.setDescricao("Descrição Atualizada");

        when(dominioRepository.findById(1)).thenReturn(Optional.of(dominio));
        when(dominioRepository.save(any(Dominio.class))).thenReturn(updatedDominio);

        Dominio result = dominioService.update(1, updatedDominio);

        assertNotNull(result);
        assertEquals("DEF", result.getSigla());
        verify(dominioRepository, times(1)).findById(1);
        verify(dominioRepository, times(1)).save(updatedDominio);
    }

    @Test
    void shouldDeleteDominioWhenFound() {
        when(dominioRepository.findById(1)).thenReturn(Optional.of(dominio));

        dominioService.delete(1);

        verify(dominioRepository, times(1)).findById(1);
        verify(dominioRepository, times(1)).deleteById(1);
    }

    @Test
    void shouldThrowExceptionWhenDeleteDominioNotFound() {
        when(dominioRepository.findById(1)).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> dominioService.delete(1));

        assertEquals("Dominio informado não encontrado. Id: 1", exception.getMessage());
        verify(dominioRepository, times(1)).findById(1);
    }
}
