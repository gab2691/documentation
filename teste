@Service
public class ItemWithRedisService implements ItemWithRedisUserCase {

    private final ItemRedisRepository itemRepository;

    public ItemWithRedisService(ItemRedisRepository itemRepository) {
        this.itemRepository = itemRepository;
    }

    @Override
    public ItemModel criar(ItemCriarModel itemCriarModel) {
        ItemRedisEntity entity = new ItemRedisEntity();
        entity.setId(itemCriarModel.getId());
        entity.setDescricao(itemCriarModel.getDescricao());
        entity.setQuantidade(itemCriarModel.getQuantidade());
        entity.setPrecoUnitario(itemCriarModel.getPrecoUnitario());
        entity.setAtivo(true);
        entity.setDataCriacao(LocalDateTime.now());
        itemRepository.save(entity);
        return new ItemModel(entity.getId(), entity.getDescricao(), entity.getQuantidade(), entity.getPrecoUnitario(), entity.getAtivo(), entity.getDataCriacao());
    }

    @Override
    @Cacheable(value = "item", key = "#id")
    public ItemModel obter(Integer id) {
        ItemRedisEntity entity = itemRepository.findById(id).orElseThrow(() -> new NotFoundException("Item not found"));
        return new ItemModel(entity.getId(), entity.getDescricao(), entity.getQuantidade(), entity.getPrecoUnitario(), entity.getAtivo(), entity.getDataCriacao());
    }

    @Override
    @CachePut(value = "item", key = "#id")
    public ItemModel atualizar(Integer id, ItemAtualizarModel itemAtualizarModel) {
        ItemRedisEntity entity = new ItemRedisEntity();
        entity.setId(id);
        entity.setDescricao(itemAtualizarModel.getDescricao());
        entity.setQuantidade(itemAtualizarModel.getQuantidade());
        entity.setPrecoUnitario(itemAtualizarModel.getPrecoUnitario());
        entity.setAtivo(true);
        itemRepository.save(entity);
        return new ItemModel(entity.getId(), entity.getDescricao(), entity.getQuantidade(), entity.getPrecoUnitario(), entity.getAtivo(), entity.getDataCriacao());
    }

    @Override
    @CacheEvict(value = "item", key = "#id")
    public void excluir(Integer id) {
        itemRepository.deleteById(id);
    }
}
