import java.util.ArrayList;
import java.util.List;

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }

    public static int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
    }

    public static List<List<String>> printTree(TreeNode root) {
        int height = getHeight(root);
        int width = (int) Math.pow(2, height) - 1;
        List<List<String>> res = new ArrayList<>();
        for (int i = 0; i < height; i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < width; j++) {
                row.add("");
            }
            res.add(row);
        }
        fill(res, root, 0, 0, width - 1);
        return res;
    }

    private static void fill(List<List<String>> res, TreeNode root, int level, int left, int right) {
        if (root == null) {
            return;
        }
        int mid = (left + right) / 2;
        res.get(level).set(mid, String.valueOf(root.val));
        fill(res, root.left, level + 1, left, mid - 1);
        fill(res, root.right, level + 1, mid + 1, right);
    }

    public static void printFormattedTree(TreeNode root) {
        List<List<String>> lines = printTree(root);
        for (List<String> line : lines) {
            StringBuilder sb = new StringBuilder();
            for (String val : line) {
                if (val.isEmpty()) {
                    sb.append("    ");
                } else {
                    sb.append(String.format("(%s)", val));
                }
            }
            System.out.println(sb.toString());
        }
    }
}
