import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class JourneyServiceTest {

    @Mock
    private DemandaReservaService demandaReservaService;

    @Mock
    private DemandaReservaRepository demandaReservaRepository;

    @Mock
    private ConjuntoComponenteMapper conjuntoComponenteMapper;

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private JourneyService journeyService;

    private JourneyClientDTO journeyClientDTO;
    private JourneyDTO journeyDTO;
    private DemandaReserva demandaReserva;

    @BeforeEach
    void setUp() {
        journeyClientDTO = JourneyClientDTO.builder()
                .numeroDemanda("journey123")
                .fase("Open")
                .subfase("Active")
                .centroDeCusto("CC001")
                .cpf("12345678901")
                .build();

        journeyDTO = JourneyDTO.builder()
                .id("journey123")
                .cc("CC001")
                .cpf("12345678901")
                .fase("Open")
                .subfase("Active")
                .build();

        demandaReserva = DemandaReserva.builder()
                .idJourney("journey123")
                .environment(Ambiente.PRODUCAO)
                .cpf("12345678901")
                .arquetipos(List.of(new ConjuntoComponente()))
                .cc("CC001")
                .build();
    }

    @Test
    void shouldFetchJourneysInApiServiceNow() {
        when(demandaReservaService.checkIfJourneyExists("journey123")).thenReturn(false);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        headers.set("User-Agent", "Mozilla/5.0");
        headers.set("Authorization", "Basic token123");

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<List<JourneyClientDTO>> response = new ResponseEntity<>(List.of(journeyClientDTO), HttpStatus.OK);

        RestTemplate restTemplateJourney = mock(RestTemplate.class);
        when(restTemplateJourney.exchange(
                anyString(),
                eq(HttpMethod.GET),
                eq(entity),
                any(ParameterizedTypeReference.class))
        ).thenReturn(response);

        JourneyDTO result = journeyService.fetchJourneysInApiServiceNow("journey123");

        assertNotNull(result);
        assertEquals(journeyClientDTO.getNumeroDemanda(), result.getId());
    }

    @Test
    void shouldThrowExceptionWhenJourneyNotFoundInApi() {
        when(demandaReservaService.checkIfJourneyExists("journey123")).thenReturn(false);

        RestTemplate restTemplateJourney = mock(RestTemplate.class);
        when(restTemplateJourney.exchange(
                anyString(),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class))
        ).thenThrow(HttpClientErrorException.NotFound.class);

        ResourceNotFoundException exception = assertThrows(
                ResourceNotFoundException.class,
                () -> journeyService.fetchJourneysInApiServiceNow("journey123")
        );

        assertEquals("Lista de Journeys vazia.", exception.getMessage());
    }

    @Test
    void shouldFetchJourneysTechLead() {
        when(demandaReservaRepository.findByIdJourney("journey123")).thenReturn(Optional.of(demandaReserva));

        CostCenterTechLeadDTO costCenterTechLeadDTO = new CostCenterTechLeadDTO("CC001", "Cost Center Test");
        when(journeyService.fetchCostCenter("CC001")).thenReturn(costCenterTechLeadDTO);

        ArchetypeTechLeadDTO archetypeTechLeadDTO = ArchetypeTechLeadDTO.builder()
                .id("1")
                .title("Archetype Test")
                .build();
        when(conjuntoComponenteMapper.convertToArchetypeDTO(any(ConjuntoComponente.class))).thenReturn(archetypeTechLeadDTO);

        JourneyTechLeadDTO result = journeyService.fetchJourneysTechLead("journey123");

        assertNotNull(result);
        assertEquals("journey123", result.getId());
        assertEquals("CC001", result.getCostcenter().getSigla());
        verify(demandaReservaRepository, times(1)).findByIdJourney("journey123");
    }

    @Test
    void shouldThrowExceptionWhenTechLeadJourneyNotFound() {
        when(demandaReservaRepository.findByIdJourney("journey123")).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(
                ResourceNotFoundException.class,
                () -> journeyService.fetchJourneysTechLead("journey123")
        );

        assertEquals("Journey not found", exception.getMessage());
        verify(demandaReservaRepository, times(1)).findByIdJourney("journey123");
    }

    @Test
    void shouldFetchCostCenter() {
        CostCenterTechLeadDTO costCenterTechLeadDTO = new CostCenterTechLeadDTO("CC001", "Cost Center Test");
        CostCenterTechLeadDTO[] costCenters = {costCenterTechLeadDTO};

        when(restTemplate.getForObject(anyString(), eq(CostCenterTechLeadDTO[].class))).thenReturn(costCenters);

        CostCenterTechLeadDTO result = journeyService.fetchCostCenter("CC001");

        assertNotNull(result);
        assertEquals("CC001", result.getSigla());
    }

    @Test
    void shouldThrowExceptionWhenCostCenterNotFound() {
        CostCenterTechLeadDTO[] costCenters = {};
        when(restTemplate.getForObject(anyString(), eq(CostCenterTechLeadDTO[].class))).thenReturn(costCenters);

        ResourceNotFoundException exception = assertThrows(
                ResourceNotFoundException.class,
                () -> journeyService.fetchCostCenter("CC001")
        );

        assertEquals("Cost center not found for sigla: CC001", exception.getMessage());
    }
}
