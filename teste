@ExtendWith(MockitoExtension.class)
class ComponenteServiceTest {

    @Mock
    private ComponenteRepository componenteRepository;

    @InjectMocks
    private ComponenteService componenteService;

    private Componente componente;

    @BeforeEach
    void setUp() {
        componente = new Componente();
        componente.setId(1);
        componente.setNome("Teste");
    }

    @Test
    void shouldCreateComponente() {
        // Arrange
        when(componenteRepository.save(componente)).thenReturn(componente);

        // Act
        Componente result = componenteService.create(componente);

        // Assert
        assertNotNull(result);
        assertEquals(componente.getId(), result.getId());
        verify(componenteRepository, times(1)).save(componente);
    }

    @Test
    void shouldReadAllComponentes() {
        // Arrange
        Pageable pageable = PageRequest.of(0, 10);
        Page<Componente> page = new PageImpl<>(List.of(componente));
        when(componenteRepository.findAll(pageable)).thenReturn(page);

        // Act
        Page<Componente> result = componenteService.readAll(pageable);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        verify(componenteRepository, times(1)).findAll(pageable);
    }

    @Test
    void shouldReadByIdWhenFound() {
        // Arrange
        when(componenteRepository.findById(1)).thenReturn(Optional.of(componente));

        // Act
        Componente result = componenteService.readById(1);

        // Assert
        assertNotNull(result);
        assertEquals(componente.getId(), result.getId());
        verify(componenteRepository, times(1)).findById(1);
    }

    @Test
    void shouldThrowExceptionWhenReadByIdNotFound() {
        // Arrange
        when(componenteRepository.findById(1)).thenReturn(Optional.empty());

        // Act & Assert
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, () -> componenteService.readById(1));
        assertEquals("Componente informado não encontrado. Id: 1", exception.getMessage());
        verify(componenteRepository, times(1)).findById(1);
    }

    @Test
    void shouldUpdateComponenteWhenFound() {
        // Arrange
        Componente updatedComponente = new Componente();
        updatedComponente.setNome("Atualizado");

        when(componenteRepository.findById(1)).thenReturn(Optional.of(componente));
        when(componenteRepository.save(any(Componente.class))).thenReturn(updatedComponente);

        // Act
        Componente result = componenteService.update(1, updatedComponente);

        // Assert
        assertNotNull(result);
        assertEquals("Atualizado", result.getNome());
        verify(componenteRepository, times(1)).findById(1);
        verify(componenteRepository, times(1)).save(updatedComponente);
    }

    @Test
    void shouldDeleteComponenteWhenFound() {
        // Arrange
        when(componenteRepository.findById(1)).thenReturn(Optional.of(componente));

        // Act
        componenteService.delete(1);

        // Assert
        verify(componenteRepository, times(1)).findById(1);
        verify(componenteRepository, times(1)).deleteById(1);
    }

    @Test
    void shouldThrowExceptionWhenDeleteComponenteNotFound() {
        // Arrange
        when(componenteRepository.findById(1)).thenReturn(Optional.empty());

        // Act & Assert
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, () -> componenteService.delete(1));
        assertEquals("Componente informado não encontrado. Id: 1", exception.getMessage());
        verify(componenteRepository, times(1)).findById(1);
    }
}
