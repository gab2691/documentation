@Configuration
@ConfigurationProperties(prefix = "picpay.kafka")
class KafkaProperties {
    var brokers: Map<String, BrokerConfig> = emptyMap()
    var consumers: Map<String, ConsumerConfig> = emptyMap()
    var retrySuffix: String? = null
    var dltSuffix: String? = null
    var topicsPrefix: String? = null
    var producer: Producer? = null
    var bind: BindConfig? = null
    var config: Config? = null
    var bindMap: Map<String, BinderValues>? = null
    var retry: Retry? = null
    var dlt: Dlt? = null

    class BrokerConfig {
        var bootstrapServers: String? = null
        var username: String? = null
        var password: String? = null
        var securityProtocol: String? = null
        var mechanism: String? = null
    }

    class ConsumerConfig {
        var brokerId: String? = null
        var groupId: String? = null
        var topic: String? = null
        var autoOffsetReset: String? = null
    }

    class BindConfig {
        var consumer: Map<String, String>? = null
        var producer: Map<String, String>? = null
    }

    class Config {
        var maxPoolRecords: Int? = null
        var maxPoolInterval: Int? = null
        var sessionTimeout: Int? = null
        var securityProtocol: String? = null
        var saslSslMechanism: String? = null
        var saslPlainMechanism: String? = null
        var autoOffsetReset: String? = null
        var trustedPackages: String? = null
        var maxSizeMsg: Int? = null
        var retryAttempts: Int? = null
        var retryDelay: Int? = null
        var listenerConcurrency: Int? = null
    }
    data class BinderValues(
        var legacy: String,
        var new: String
    )

    data class Retry(
        var attempts: Int?,
        var delay: Int?,
        var mode: String?,
        var suffix: String?
    )

    data class Dlt(
        var suffix: String?
    )

    data class Producer(
        var idempotence: Boolean?,
        var clientId: String?,
        var retires: Int?,
        var acks: String?
    )
}
