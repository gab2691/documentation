import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.SignatureAlgorithm;
import java.io.File;
import java.io.FileReader;
import java.security.KeyPair;
import java.security.Security;
import java.security.interfaces.RSAPrivateKey;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.PEMKeyPair;

public class GitHubAppAuth {
    private static final long APP_ID = 1152168; // Ensure it's a number
    private static final String PRIVATE_KEY_PATH = "cert/bex-gerador-codigo.pem"; // Update path

    public static String generateToken() throws Exception {
        RSAPrivateKey privateKey = readPrivateKey(new File(PRIVATE_KEY_PATH));

        return Jwts.builder()
                .issuer(String.valueOf(APP_ID)) // âœ… Must be a string of the App ID
                .issuedAt(Date.from(Instant.now().minus(60L, ChronoUnit.SECONDS)))
                .expiration(Date.from(Instant.now().plus(10L, ChronoUnit.MINUTES)))
                .signWith(privateKey, Jwts.SIG.RS256)
                .compact();
    }

    private static RSAPrivateKey readPrivateKey(File file) throws Exception {
        if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
            Security.addProvider(new BouncyCastleProvider());
        }

        try (PEMParser pemParser = new PEMParser(new FileReader(file))) {
            Object parsedObject = pemParser.readObject();
            if (!(parsedObject instanceof PEMKeyPair)) {
                throw new IllegalArgumentException("Invalid private key format.");
            }

            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
            converter.setProvider(BouncyCastleProvider.PROVIDER_NAME);
            KeyPair keyPair = converter.getKeyPair((PEMKeyPair) parsedObject);

            return (RSAPrivateKey) keyPair.getPrivate();
        }
    }
}
