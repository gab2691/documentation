import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.representer.Representer;
import org.yaml.snakeyaml.nodes.Tag;
import org.yaml.snakeyaml.representer.SafeRepresenter;
import org.yaml.snakeyaml.nodes.Node;
import org.yaml.snakeyaml.nodes.ScalarNode;

import java.io.StringWriter;
import java.util.Map;

public class YamlSerializationExample {

    public static void main(String[] args) {
        // Exemplo de dados YAML
        String yamlInput = "spring:\n  lifecycle:\n    timeout-per-shutdown-phase: \"45s\"";

        // Carregar o YAML em um objeto Map
        Yaml yaml = new Yaml();
        Map<String, Object> data = yaml.load(yamlInput);

        // Configurar as opções do Dumper
        DumperOptions options = new DumperOptions();
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
        options.setPrettyFlow(true);

        // Criar um Representer personalizado
        Representer representer = new SafeRepresenter() {
            @Override
            protected Node representScalar(Tag tag, String value, DumperOptions.ScalarStyle style) {
                // Forçar a representação com aspas duplas para valores que devem ser preservados
                if (value.matches("^\\d+\\D+$")) {
                    return super.representScalar(tag, value, DumperOptions.ScalarStyle.DOUBLE_QUOTED);
                }
                return super.representScalar(tag, value, style);
            }
        };
        representer.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);

        // Criar uma instância do Yaml com as opções configuradas
        Yaml yamlWithQuotes = new Yaml(representer, options);

        // Serializar o objeto Map de volta para YAML
        StringWriter writer = new StringWriter();
        yamlWithQuotes.dump(data, writer);
        String yamlOutput = writer.toString();

        // Exibir o YAML serializado
        System.out.println(yamlOutput);
    }
}
