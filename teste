import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ConjuntoComponenteServiceTest {

    @Mock
    private ConjuntoComponenteRepository conjuntoComponenteRepository;

    @Mock
    private ComponenteRepository componenteRepository;

    @Mock
    private ConjuntoComponenteMapper conjuntoComponenteMapper;

    @InjectMocks
    private ConjuntoComponenteService conjuntoComponenteService;

    private ConjuntoComponenteDTO conjuntoComponenteDTO;
    private ConjuntoComponente conjuntoComponente;
    private UUID conjuntoId;
    private Componente componente;

    @BeforeEach
    void setUp() {
        conjuntoId = UUID.randomUUID();

        conjuntoComponenteDTO = ConjuntoComponenteDTO.builder()
                .id(conjuntoId)
                .nome("Conjunto Teste")
                .descricao("Descrição Teste")
                .tipo("Tipo Teste")
                .idComponentes(List.of(1))
                .build();

        conjuntoComponente = ConjuntoComponente.builder()
                .id(conjuntoId)
                .nome("Conjunto Teste")
                .descricao("Descrição Teste")
                .tipo("Tipo Teste")
                .build();

        componente = new Componente();
        componente.setId(1);
        componente.setNome("Componente Teste");
    }

    @Test
    void shouldCreateConjuntoComponente() {
        when(conjuntoComponenteMapper.convertToEntity(conjuntoComponenteDTO)).thenReturn(conjuntoComponente);
        when(componenteRepository.existsById(1)).thenReturn(true);
        when(componenteRepository.findAllById(conjuntoComponenteDTO.getIdComponentes())).thenReturn(List.of(componente));
        when(conjuntoComponenteRepository.save(conjuntoComponente)).thenReturn(conjuntoComponente);
        when(conjuntoComponenteMapper.convertToDTO(conjuntoComponente)).thenReturn(conjuntoComponenteDTO);

        ConjuntoComponenteDTO result = conjuntoComponenteService.create(conjuntoComponenteDTO);

        assertNotNull(result);
        assertEquals(conjuntoComponenteDTO.getId(), result.getId());
        verify(conjuntoComponenteRepository, times(1)).save(conjuntoComponente);
    }

    @Test
    void shouldReadAllConjuntos() {
        Pageable pageable = PageRequest.of(0, 10);
        Page<ConjuntoComponente> page = new PageImpl<>(List.of(conjuntoComponente));
        when(conjuntoComponenteRepository.findAll(pageable)).thenReturn(page);
        when(conjuntoComponenteMapper.convertToDTO(conjuntoComponente)).thenReturn(conjuntoComponenteDTO);

        Page<ConjuntoComponenteDTO> result = conjuntoComponenteService.readAll(pageable);

        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        verify(conjuntoComponenteRepository, times(1)).findAll(pageable);
    }

    @Test
    void shouldReadByIdWhenFound() {
        when(conjuntoComponenteRepository.findById(conjuntoId)).thenReturn(Optional.of(conjuntoComponente));
        when(conjuntoComponenteMapper.convertToDTO(conjuntoComponente)).thenReturn(conjuntoComponenteDTO);

        ConjuntoComponenteDTO result = conjuntoComponenteService.readById(conjuntoId);

        assertNotNull(result);
        assertEquals(conjuntoComponenteDTO.getId(), result.getId());
        verify(conjuntoComponenteRepository, times(1)).findById(conjuntoId);
    }

    @Test
    void shouldThrowExceptionWhenReadByIdNotFound() {
        when(conjuntoComponenteRepository.findById(conjuntoId)).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> conjuntoComponenteService.readById(conjuntoId));

        assertEquals("Arquétipo informado não encontrado. Id: " + conjuntoId, exception.getMessage());
        verify(conjuntoComponenteRepository, times(1)).findById(conjuntoId);
    }

    @Test
    void shouldUpdateConjuntoComponente() {
        when(conjuntoComponenteRepository.findById(conjuntoId)).thenReturn(Optional.of(conjuntoComponente));
        when(conjuntoComponenteMapper.convertToEntity(conjuntoComponenteDTO)).thenReturn(conjuntoComponente);
        when(componenteRepository.existsById(1)).thenReturn(true);
        when(componenteRepository.findAllById(conjuntoComponenteDTO.getIdComponentes())).thenReturn(List.of(componente));
        when(conjuntoComponenteRepository.save(conjuntoComponente)).thenReturn(conjuntoComponente);
        when(conjuntoComponenteMapper.convertToDTO(conjuntoComponente)).thenReturn(conjuntoComponenteDTO);

        ConjuntoComponenteDTO result = conjuntoComponenteService.update(conjuntoId, conjuntoComponenteDTO);

        assertNotNull(result);
        assertEquals(conjuntoComponenteDTO.getId(), result.getId());
        verify(conjuntoComponenteRepository, times(1)).save(conjuntoComponente);
    }

    @Test
    void shouldDeleteConjuntoComponenteWhenFound() {
        when(conjuntoComponenteRepository.findById(conjuntoId)).thenReturn(Optional.of(conjuntoComponente));

        conjuntoComponenteService.delete(conjuntoId);

        verify(conjuntoComponenteRepository, times(1)).findById(conjuntoId);
        verify(conjuntoComponenteRepository, times(1)).deleteById(conjuntoId);
    }

    @Test
    void shouldThrowExceptionWhenDeleteConjuntoComponenteNotFound() {
        when(conjuntoComponenteRepository.findById(conjuntoId)).thenReturn(Optional.empty());

        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class,
                () -> conjuntoComponenteService.delete(conjuntoId));

        assertEquals("Arquétipo informado não encontrado. Id: " + conjuntoId, exception.getMessage());
        verify(conjuntoComponenteRepository, times(1)).findById(conjuntoId);
    }
}
